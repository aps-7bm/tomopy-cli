#!/usr/bin/env python

import os
import re
import sys
import argparse
import logging
import time
import pathlib
from datetime import datetime

from tomopy_cli import config, __version__
from tomopy_cli import log
from tomopy_cli import recon
from tomopy_cli import find_center
from tomopy_cli import file_io
from tomopy_cli import post
from tomopy_cli.auto_complete import create_complete_tomopy


def init(args):

    if not os.path.exists(str(args.config)):
        config.write(args.config)
    else:
        log.error("{0} already exists".format(args.config))    

def run_status(args):

    config.log_values(args)

def run_find_center(args):

    if (str(args.file_format) in {'dx', 'aps2bm', 'aps7bm', 'aps32id'}):
        log.warning('find center start')
        args = find_center.find_rotation_axis(args)
        log.warning('find center end')

        # update tomopy.conf
        sections = config.RECON_PARAMS
        config.write(args.config, args=args, sections=sections)
    else:
        log.error("  *** %s is not a supported file format" % args.file_format)
        exit()

def run_seg(args):

    log.warning('segmentation start')
    post.segment(args)
    log.warning('segmentation end')

    # update tomopy.conf
    sections = config.RECON_PARAMS
    config.write(args.config, args=args, sections=sections)


def run_convert(args):

    log.warning('convert start')
    file_io.convert(args)
    log.warning('convert end')

    
def run_rec(args):

    log.warning('reconstruction start')

    if (str(args.file_format) in {'dx', 'aps2bm', 'aps7bm', 'aps32id'}):
        if os.path.isfile(args.file_name):    
            log.info("reconstructing a single file: %s" % args.file_name)   
            recon.rec(args)
            config.update_config(args)
        elif os.path.isdir(args.file_name):
            # Add a trailing slash if missing
            top = os.path.join(args.file_name, '')

            h5_file_list = list(filter(lambda x: x.endswith(('.h5', '.hdf', 'hdf5')), os.listdir(top)))
            if (h5_file_list):
                h5_file_list.sort()
                log.info("found: %s" % h5_file_list) 
                # look for pre-calculated rotation axis positions.
                jfname = top + args.rotation_axis_file
                if(os.path.exists(jfname)):
                    log.warning("  *** try to use pre-calculated rotation centers from %s file" % jfname)   
                    dictionary = file_io.read_rot_centers(args)
                    # log.warning("reconstructing a folder containing %d files" % len(dictionary))   
                    index = 0
                    for key in dictionary:
                        dict2 = dictionary[key]
                        for h5fname in dict2:
                            args.rotation_axis = dict2[h5fname]
                            fname = top + h5fname
                            args.file_name = fname
                            log.warning("  *** file %d/%d; ord(%s);  %s center: %f" % (index, len(dictionary)-1, key, args.file_name, args.rotation_axis))
                            index += 1
                            recon.rec(args)
                            config.update_config(args)
                    log.warning('reconstruction end')
                else:
                    log.warning("  *** no pre-calculated rotation centers from %s file" % jfname)   
                    index=0
                    for fname in h5_file_list:
                        args.file_name = top + fname
                        log.warning("  *** file %d/%d;  %s" % (index, len(h5_file_list), fname))
                        index += 1
                        recon.rec(args)
                        config.update_config(args)
                    log.warning('reconstruction end')
            else:
                log.error("directory %s does not contain any file" % args.file_name)
        else:
            log.error("directory or File Name does not exist: %s" % args.file_name)
    else:
        # add here support for other file formats
        log.error("  *** %s is not a supported file format" % args.file_format)
        log.error("supported data formats are: %s, %s, %s, %s" % ('dx', 'aps2bm', 'aps7bm', 'aps32id'))


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(__version__))

    tomo_params = config.RECON_PARAMS
    find_center_params = config.RECON_PARAMS
    convert_params = config.CONVERT_PARAMS

    cmd_parsers = [
        ('init',        init,            (),                             "Create configuration file"),
        ('recon',       run_rec,         tomo_params,                    "Run tomographic reconstruction"),
        ('status',      run_status,      tomo_params,                    "Show the tomographic reconstruction status"),
        ('segment',     run_seg,         tomo_params,                    "Run segmentation on reconstured data"),
        ('find_center', run_find_center, find_center_params,             "Find rotation axis location for all hdf files in a directory"),
        ('convert',     run_convert,     convert_params,                 "Convert pre-2015 (proj, dark, white) hdf files in a single data exchange h5 file"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)

    # create logger
    logs_home = args.logs_home

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = os.path.join(logs_home, 'tomopy_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H_%M_%S") + '.log')
 
    log.setup_custom_logger(lfname)
    log.info("Saving log at %s" % lfname)

    try:
        # config.log_values(args)
        args._func(args)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)
         

if __name__ == '__main__':
    main()

