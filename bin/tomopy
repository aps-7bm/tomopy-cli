#!/local/decarlo/conda/anaconda/bin/python
#!/Users/decarlo/anaconda2/bin/python
#!/usr/bin/env python

import os
import sys
import argparse
import logging
import time
import re
import pathlib
from datetime import datetime

from tomopy_cli import config #, __version__
from tomopy_cli import log_lib


def init(args):
    if not os.path.exists(args.config):
        config.write(args.config)
    else:
        log_lib.error("{0} already exists".format(args.config))


def rec(args):
    from recon import reco
    reco.tomo(args)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    tomo_params = config.TOMO_PARAMS
    gui_params = tomo_params + ('gui', )

    cmd_parsers = [
        ('init',        init,           (),                             "Create configuration file"),
        ('rec',         rec,            tomo_params,                    "Run tomographic reconstruction"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        #print(cmd, func, sections, text)
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)
    # log_level = logging.DEBUG if args.verbose else logging.INFO
    # LOG.setLevel(log_level)
    # create logger

    home = str(pathlib.Path.home())
    logs_home = home + '/logs/'
    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)
    lfname = logs_home + 'rec_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log_lib.setup_logger(lfname)

    log_lib.info("logger is ready")   

    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
    # LOG.addHandler(stream_handler)

    if args.log:
        file_handler = logging.FileHandler(args.log)
        file_handler.setFormatter(logging.Formatter('%(name)s:%(levelname)s: %(message)s'))
        log_lib.addHandler(file_handler)

    try:
        config.log_values(args)
        args._func(args)
    except RuntimeError as e:
        log_lib.error(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()

