#!/usr/bin/env python

import os
import sys
import argparse
import logging
import time
import re
import pathlib
from datetime import datetime

from tomopy_cli import config, __version__
from tomopy_cli import log
from tomopy_cli import recon
from tomopy_cli import file_io
from tomopy_cli import find_center


def init(args):

    if not os.path.exists(str(args.config)):
        config.write(args.config)
    else:
        log.error("{0} already exists".format(args.config))


def run_find_center(args):

    log.warning('find center start')
    find_center.auto(args)
    log.warning('find center end')


def run_rec(args):

    log.warning('reconstruction start')
    if os.path.isfile(args.hdf_file):    

        log.info("Reconstructing a single file: %s" % args.hdf_file)   
        recon.rec(args)

    elif os.path.isdir(args.hdf_file):
        log.info("Reconstructing a folder containing multiple files:")   

        # Add a trailing slash if missing
        top = os.path.join(args.hdf_file, '')

        dictionary = file_io.read_rot_centers(args)
        for key in dictionary:
            dict2 = dictionary[key]
            for h5fname in dict2:
                args.rotation_axis = dict2[h5fname]
                fname = top + h5fname
                args.hdf_file = fname
                log.info("   *** file: %s center: %f" % (args.hdf_file, args.rotation_axis))
                if args.reconstruction_type == "try":            
                    recon.try_center(args)
                elif (args.reconstruction_type == "slice") or (args.reconstruction_type == "full"):
                    recon.rec(args)
                else:
                    log.error("Option: %s is not supported " % args.reconstruction_type)   

    else:
        log.error("Directory or File Name does not exist: %s" % args.hdf_file)

    # update config file
    sections = config.RECON_PARAMS
    config.write(args.config, args=args, sections=sections)
    log.warning('reconstruction end')


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(__version__))

    tomo_params = config.RECON_PARAMS
    find_center_params = config.FIND_CENTER_PARAMS

    cmd_parsers = [
        ('init',        init,            (),                             "Create configuration file"),
        ('recon',       run_rec,         tomo_params,                    "Run tomographic reconstruction"),
        ('find_center', run_find_center, find_center_params,             "Find rotation axis location for all hdf files in a directory"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)

    # create logger
    logs_home = args.logs_home

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = os.path.join(logs_home, 'tomopy_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log')
 
    log.setup_logger(lfname)
    log.info("Saving log at %s" % lfname)

    try:
        config.log_values(args)
        args._func(args)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()

